// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 (swiftlang-6.0.0.7.6 clang-1600.0.24.1)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -Onone -module-alias SwiftProtobuf=AndroidAutoInternalSwiftProtobuf -enable-experimental-feature AccessLevelOnImport -enable-bare-slash-regex -module-name AndroidAutoAccountTransferCore -package-name third_party/swift/AndroidAutoCompanion/Frameworks/AndroidAutoAccountTransferCore
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_Concurrency.MainActor public struct AccountTransferMessageHandler<M> where M : AndroidAutoAccountTransferCore.Messenger {
  @_Concurrency.MainActor public init(_ messenger: M)
  @_Concurrency.MainActor public func handleMessage(_ message: Foundation.Data, from car: M.Remote) throws
}
public enum AccountTransferMessageHandlerError : Swift.Error {
  case malformedRequest(Swift.String)
}
extension AndroidAutoAccountTransferCore.AccountTransferMessageHandlerError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_Concurrency.MainActor public protocol Messenger : AnyObject {
  associatedtype Remote : Swift.Equatable, Swift.Sendable
  @_Concurrency.MainActor func sendMessage(_ message: Foundation.Data, to car: Self.Remote, completion: (@_Concurrency.MainActor @Sendable (Swift.Bool) -> Swift.Void)?) throws
}
@_Concurrency.MainActor public struct SecondDeviceSignInURLMessageHandler<M> where M : AndroidAutoAccountTransferCore.Messenger {
  @_Concurrency.MainActor public var connectedCar: M.Remote? {
    get
  }
  @_Concurrency.MainActor public init(_ messenger: M)
  @_Concurrency.MainActor public mutating func startSignIn(from uiViewController: UIKit.UIViewController) -> Swift.Bool
  @_Concurrency.MainActor public mutating func handleMessage(_ message: Foundation.Data, from car: M.Remote) throws -> AndroidAutoAccountTransferCore.SecondDeviceSignInURLMessageHandler<M>.Event
  @_Concurrency.MainActor public mutating func notifyFailure() throws
}
extension AndroidAutoAccountTransferCore.SecondDeviceSignInURLMessageHandler {
  public enum Error : Swift.Error {
    case malformedRequest(Swift.String)
    case inconsistentState(Swift.String)
    case mismatchedCars(M.Remote?, M.Remote)
  }
}
extension AndroidAutoAccountTransferCore.SecondDeviceSignInURLMessageHandler.Error : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension AndroidAutoAccountTransferCore.SecondDeviceSignInURLMessageHandler {
  public enum Event : Swift.Equatable {
    case receivedURL
    case receivedCredential
    case cancelSignIn
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: AndroidAutoAccountTransferCore.SecondDeviceSignInURLMessageHandler<M>.Event, b: AndroidAutoAccountTransferCore.SecondDeviceSignInURLMessageHandler<M>.Event) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension AndroidAutoAccountTransferCore.AccountTransferMessageHandler : Swift.Sendable {}
extension AndroidAutoAccountTransferCore.SecondDeviceSignInURLMessageHandler : Swift.Sendable {}
extension AndroidAutoAccountTransferCore.SecondDeviceSignInURLMessageHandler.Event : Swift.Hashable {}
